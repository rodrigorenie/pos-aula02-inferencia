rnorm(10) #gera uma sequencia de números aleatórios conforme a distribuiçao xxx
dnorm(0) #calcula a funcao densidade para o valor de x conforme a distribuiçao xxx
qnorm(0.975) #calcula o valor de Z para a probabilidade acumulada prob
pnorm(1.96) #calcula o valor da área acumulada sob a curva de densidade da distribuiçao para um dado valor de Z
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- NULL
for (v in 1:1000) {
a <- sample(c("Cara","Coroa"),100,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
contagem
hist(contagem)
##############################################################################
##############################################################################
# teorema central do limite Dados com 6 lados e 10 linhas
##############################################################################
contagem <- NULL
for (v in 1:10) {
a <- sample(1:6,100,replace=T)
contagem <- rbind(contagem, length(a[a==3]))
}
contagem
hist(contagem, freq = F)
mean(contagem)
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- NULL
for (v in 1:1000) {
a <- sample(c("Cara","Coroa"),100,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
contagem
hist(contagem)
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- NULL
for (v in 1:100000) {
a <- sample(c("Cara","Coroa"),10000,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
contagem
hist(contagem)
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- NULL
for (v in 1:100000) {
a <- sample(c("Cara","Coroa"),10000,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
contagem
hist(contagem)
for (v in 1:100000) {
a <- sample(c("Cara","Coroa"),10000,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- NULL
for (v in 1:10000) {
a <- sample(c("Cara","Coroa"),10000,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
for (v in 1:1000) {
a <- sample(c("Cara","Coroa"),10000,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
contagem
hist(contagem)
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- 1
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- 1
contagem <- 1
contagem <- NULL
for (v in 1:100000) {
a <- sample(c("Cara","Coroa"),10000,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
contagem
hist(contagem)
##############################################################################
##############################################################################
# teorema central do limite Moeda
##############################################################################
contagem <- NULL
for (v in 1:1000) {
a <- sample(c("Cara","Coroa"),10000,replace=T)
contagem <- rbind(contagem, length(a[a=="Cara"]))
}
contagem
hist(contagem)
## Plote a curva no gráfico de dispersão. Dica: utilize a
## função curve(add = TRUE)
plot(x = cars$hp, y = cars$mpg, type = 'p',
main = "Horse Power influence on car consumption",
xlab = "Horse Power",
ylab = "Miles per Gallon")
curve(getmpg(x), from = 40, to = 400, add = T, col = "red")
pf <- c(1.9, 1.7)
pf
pf <- c(1.9, 1.7, 2.8, 2.4, 2.6, 2.5, 2.8, 3.2, 1.6, 2.5)
pf
hist(pf)
summary(pf)
pf_median <- median(c)
median(c)
pf_median <- median(pf)
pf_median
summary(pf)
summary(pf)
str(summary(pf))
summary(pf)
pf_mean <- mean(pf)
pf_mean
summary(pf)
source('~/Dropbox/Itaipu/Pós Graduação/Danilo Souto/02 Inferência/AtividadeFinal.R', echo=TRUE)
summary(pf)
x = c(1, 2, 3, 4)
y = c(5.943180, 7.733549, 10.739441, 13.255065)
x.avg = mean(x)
y.avg = mean(y)
alpha1 <- sum((x - x.avg) * (y - y.avg)) / sum((x-x.avg)^2)
alpha0 <- y.avg - alpha1 * x.avg
y.est = alpha0 + alpha1*x
erro = y.est - y
SQtot <- sum((y - y.avg)^2)
SQres <- sum((y - y.est)^2)
SQexp <- sum((y.est -y.avg)^2)
r.2 <- SQexp / SQtot
cov.xy <- sum((x - x.avg) * (y - y.avg)) / length(y)
r.simples <- cov.xy / (sd(x) * sd(y))
plot(x, y, main = paste("Determinação: ", round(r.2, 6)*100, "%", sep=''))
lines(y.est, col = 'red')
?lines()
y.est
SQtot
SQres
SQexp
plot(x, y, main = paste("Determinação: ", round(r.2, 6)*100, "%", sep=''))
lines(y.est, col='red')
covaricanca <- cov(mpg,hp)
covaricanca <- cov(mtcars$mpg, mtcars$hp)
correlacao <- cor(mtcars$mpg, mtcars$hp)
sprintf("Cov:%f Cor:%f",covaricanca,correlacao)
# Calcula da covariância das duas variáveis indicando se a relação linear entre
# elas é negativa ou positiva
covaricanca <- cov(mtcars$mpg, mtcars$hp)
#
correlacao <- cor(mtcars$mpg, mtcars$hp)
# Calcula da covariância e a correlação das duas variáveis indicando se a
# relação linear entre elas é negativa ou positiva
covaricanca <- cov(mtcars$mpg, mtcars$hp)
correlacao <- cor(mtcars$mpg, mtcars$hp)
sprintf("Cov:%f Cor:%f", covaricanca, correlacao)
hist(mtcars$mpg)
# H0: mpg  = normal (há normalidade)
# H1: mpg != normal (não há normalidade)
shapiro.test(mtcars$mpg)
# H0: mpg  = normal (há normalidade)
# H1: mpg != normal (não há normalidade)
pvalue <- shapiro.test(mtcars$mpg)
# H0: mpg  = normal (há normalidade)
# H1: mpg != normal (não há normalidade)
pvalue <- shapiro.test(mtcars$mpg)$p.value
if (pvalue > 0.05) {
print('Aceita-se a Hipósete Nula (H0)')
} else {
print('Rejeita-se a Hipósete Nula (H0)')
}
var.test(mtcars$mpg, mtcars$hp)
var.test(mtcars$mpg ~ mtcars$hp)
var.test(mtcars$mpg ~ mtcars$hp, data=mtcars)
var.test(mtcars$mpg, mtcars$hp)
fligner.test(mtcars$mpg, mtcars$hp)
var.test(mtcars$mpg, mtcars$hp)
var.test(mtcars$mpg, mtcars$hp)$p.value
var.test(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg)
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg ~ mtcars$hp)
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$hp, mtcars$mpg)
plot(mtcars$hp, mtcars$mpg)
hist(mtcars$mpg)
plot(mtcars$hp, mtcars$mpg)
var.test(mtcars$mpg, mtcars$hp)
fligner.test(mtcars$mpg, mtcars$hp)
pvtest <- function(pvalue, significancia=0.05) {
if (pvalue > significancia) {
print('Aceita-se a Hipósete Nula (H0)')
} else {
print('Rejeita-se a Hipósete Nula (H0)')
}
}
pvtest(var.test(mtcars$mpg, mtcars$hp)$p.value)
pvtest(fligner.test(mtcars$mpg, mtcars$hp)$p.value)
# Shapiro Test
# H0: mpg  = normal (há normalidade)
# H1: mpg != normal (não há normalidade)
pvtest(shapiro.test(mtcars$mpg)$p.value)
# Fligner Test
# H0: existe igualdade nas variâncias
# H1: não existe igualdade nas variâncias
pvtest(fligner.test(mtcars$mpg, mtcars$hp)$p.value)
modelo.linear <- lm(mtcars$mpg, mtcars$hp)
modelo.linear <- lm(mtcars$mpg ~ mtcars$hp)
modelo.linear
str(modelo.linear)
summary(modelo.linear)
str(modelo.linear)
coefficients(modelo.linear)
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear)
abline(modelo.linear, color='red')
abline(modelo.linear, col='red')
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
modelo.linear$fitted.values
points(modelo.linear$fitted.values)
points(modelo.linear$fitted.values, mtcars$hp)
?points(modelo.linear$fitted.values, mtcars$hp)
points(mtcars$hp)
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(mtcars$hp)
plot(mtcars$mpg)# ~ mtcars$hp)
points(mtcars$hp)
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(mtcars$hp)
points(modelo.linear$fitted.values)
points(50, modelo.linear$fitted.values)
modelo.linear$fitted.values
sample(1, 1)
sample(1, 4)
sample(1:100, 4)
sample(1:100, 4)
modelo.linear$fitted.values
sample(1:100, 32)
points(sample(50, 32), modelo.linear$fitted.values)
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(sample(50, 32), modelo.linear$fitted.values)
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(sample(300, 32), modelo.linear$fitted.values)
sample(300, 32)
rep(300, 32)
points(rep(300, 32), modelo.linear$fitted.values)
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(rep(300, 32), modelo.linear$fitted.values)
points(mtcars$hp)
points(mtcars$hp, col='red')
points(mtcars$hp, modelo.linear$fitted.values, col='red')
points(mtcars$hp, modelo.linear$fitted.values, col='red')
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(mtcars$hp, modelo.linear$fitted.values, col='red')
points(mtcars$hp, modelo.linear$fitted.values, col='blue')
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(mtcars$hp, modelo.linear$fitted.values, col='red')
modelo.linear$fitted.values
fitted.values(modelo.linear)
fitted.values(modelo.linear)
modelo.linear <- lm(mtcars$mpg ~ mtcars$hp, data=mtcars)
fitted.values(modelo.linear)
modelo.linear$fitted.values
plot(mtcars$mpg ~ mtcars$hp)
abline(modelo.linear, col='red')
points(mtcars$hp, modelo.linear$fitted.values, col='red')
fitted.values(modelo.linear)
str(modelo.linear)
coefficients(modelo.linear)
summary(modelo.linear)
summary(modelo.linear)$r.squared
summary(modelo.linear)$adj.r.squared
pvtest(shapiro.test(modelo.linear$residuals))
pvtest(shapiro.test(modelo.linear$residuals)$p.value)
hist(modelo.linear$residuals, density=T)
hist(modelo.linear$residuals, freq=F)
